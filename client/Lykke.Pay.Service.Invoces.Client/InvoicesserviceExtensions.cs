// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Pay.Service.Invoces.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Invoicesservice.
    /// </summary>
    public static partial class InvoicesserviceExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='merchantId'>
            /// </param>
            public static IList<IInvoiceEntity> GetInvoices(this IInvoicesservice operations, string merchantId = default(string))
            {
                return operations.GetInvoicesAsync(merchantId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='merchantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IInvoiceEntity>> GetInvoicesAsync(this IInvoicesservice operations, string merchantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInvoicesWithHttpMessagesAsync(merchantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoice'>
            /// </param>
            public static bool? SaveInvoice(this IInvoicesservice operations, InvoiceEntity invoice = default(InvoiceEntity))
            {
                return operations.SaveInvoiceAsync(invoice).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoice'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> SaveInvoiceAsync(this IInvoicesservice operations, InvoiceEntity invoice = default(InvoiceEntity), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SaveInvoiceWithHttpMessagesAsync(invoice, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceId'>
            /// </param>
            /// <param name='merchantId'>
            /// </param>
            public static IInvoiceEntity GetInvoiceById(this IInvoicesservice operations, string invoiceId, string merchantId = default(string))
            {
                return operations.GetInvoiceByIdAsync(invoiceId, merchantId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceId'>
            /// </param>
            /// <param name='merchantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IInvoiceEntity> GetInvoiceByIdAsync(this IInvoicesservice operations, string invoiceId, string merchantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInvoiceByIdWithHttpMessagesAsync(invoiceId, merchantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceId'>
            /// </param>
            /// <param name='merchantId'>
            /// </param>
            public static void DeleteInvoice(this IInvoicesservice operations, string invoiceId, string merchantId = default(string))
            {
                operations.DeleteInvoiceAsync(invoiceId, merchantId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceId'>
            /// </param>
            /// <param name='merchantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteInvoiceAsync(this IInvoicesservice operations, string invoiceId, string merchantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteInvoiceWithHttpMessagesAsync(invoiceId, merchantId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            public static IInvoiceEntity GetInvoiceByAddress(this IInvoicesservice operations, string address)
            {
                return operations.GetInvoiceByAddressAsync(address).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IInvoiceEntity> GetInvoiceByAddressAsync(this IInvoicesservice operations, string address, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInvoiceByAddressWithHttpMessagesAsync(address, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceId'>
            /// </param>
            public static IList<IFileMetaEntity> ApiInvoicesFilesByInvoiceIdGet(this IInvoicesservice operations, string invoiceId)
            {
                return operations.ApiInvoicesFilesByInvoiceIdGetAsync(invoiceId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IFileMetaEntity>> ApiInvoicesFilesByInvoiceIdGetAsync(this IInvoicesservice operations, string invoiceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiInvoicesFilesByInvoiceIdGetWithHttpMessagesAsync(invoiceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceId'>
            /// </param>
            /// <param name='fileId'>
            /// </param>
            public static IFileEntity ApiInvoicesFileByFileIdOfInvoiceByInvoiceIdGet(this IInvoicesservice operations, string invoiceId, string fileId)
            {
                return operations.ApiInvoicesFileByFileIdOfInvoiceByInvoiceIdGetAsync(invoiceId, fileId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceId'>
            /// </param>
            /// <param name='fileId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IFileEntity> ApiInvoicesFileByFileIdOfInvoiceByInvoiceIdGetAsync(this IInvoicesservice operations, string invoiceId, string fileId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiInvoicesFileByFileIdOfInvoiceByInvoiceIdGetWithHttpMessagesAsync(invoiceId, fileId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// </param>
            public static void ApiInvoicesUploadFilePost(this IInvoicesservice operations, IFileEntity entity = default(IFileEntity))
            {
                operations.ApiInvoicesUploadFilePostAsync(entity).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiInvoicesUploadFilePostAsync(this IInvoicesservice operations, IFileEntity entity = default(IFileEntity), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiInvoicesUploadFilePostWithHttpMessagesAsync(entity, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IsAliveResponse IsAlive(this IInvoicesservice operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IsAliveResponse> IsAliveAsync(this IInvoicesservice operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
